name: Docker Build

on:
  repository_dispatch:
    types: [build]
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
  pull_request:
    branches: [ main ]
  # schedule:
  #   - cron: '0 0 * * 0'

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      alpine-versions: ${{ steps.alpine-versions.outputs.alpine-versions }}
      nginx-versions: ${{ steps.nginx-versions.outputs.nginx-versions }}
      modsecurity-version: ${{ steps.modsecurity-versions.outputs.modsecurity-version }}
      crs-version: ${{ steps.crs-versions.outputs.crs-version }}
    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          ALPINE_VERSIONS=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 3 | tac | jq -Rcn '[inputs]')
          echo "alpine-versions=${ALPINE_VERSIONS}" >> "$GITHUB_OUTPUT"
      - 
        name: Get Nginx Versions
        id: nginx-versions
        run: |
          NGINX_VERSIONS=$(curl -s https://nginx.org/download/ | grep -oP '(?<=nginx-)[0-9\.]+(?=.tar.gz")' | sort -V | tail -n 4 | tac | jq -Rcn '[inputs]')
          echo "nginx-versions=${NGINX_VERSIONS}" >> "$GITHUB_OUTPUT"
      - 
        name: Get Mod Security version (latest)
        id: modsecurity-versions
        run: |
          mod_security=$(curl -s https://api.github.com/repos/SpiderLabs/ModSecurity/releases/latest | jq -r .tag_name | sed -e 's/^v//')
          echo "modsecurity-version=${mod_security}" >> "$GITHUB_OUTPUT"
      - 
        name: Get Core Ruleset version
        id: crs-versions
        run: |
          crs_version=$(curl -s https://api.github.com/repos/coreruleset/coreruleset/releases/latest | jq -r .tag_name | sed -e 's/^v//')
          echo "crs-version=${crs_version}" >> "$GITHUB_OUTPUT"
  
  build-image:
    needs: [get-versions]
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 2
      fail-fast: false
      matrix:
        nginx-version: ${{ fromJson(needs.get-versions.outputs.nginx-versions) }}
        alpine-version: ${{ fromJson(needs.get-versions.outputs.alpine-versions) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_HUB_TOKEN }}
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: | 
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
          tags: |
            type=raw,prefix=,value=latest,enable=${{ (matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0]) && (matrix.nginx-version == fromJson(needs.get-versions.outputs.nginx-versions)[0]) && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }},priority=1000
            type=semver,prefix=,pattern={{major}}.{{minor}}.{{patch}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0] && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }},priority=900
            type=raw,prefix=,value=${{ matrix.nginx-version }}-alpine-${{ matrix.alpine-version }},enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }},priority=300
            type=raw,prefix=,value=${{ github.ref_name }},enable=${{ (matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0]) && (matrix.nginx-version == fromJson(needs.get-versions.outputs.nginx-versions)[0]) && (github.ref != format('refs/heads/{0}', github.event.repository.default_branch)) }},priority=1000
            type=raw,prefix=,value=${{ github.ref_name }}-${{ matrix.nginx-version }},enable=${{ matrix.alpine-version == fromJson(needs.get-versions.outputs.alpine-versions)[0] && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }},priority=900
            type=raw,prefix=,value=${{ github.ref_name }}-${{ matrix.nginx-version }}-alpine-${{ matrix.alpine-version }},enable=${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }},priority=300
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          # platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/arm/v8
          platforms: linux/amd64
          provenance: false
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine-version }}
            NGINX_VERSION=${{ matrix.nginx-version }}
            MOD_SECURITY_VERSION=${{ needs.get-versions.outputs.modsecurity-version }}
            CRS_VERSION=${{ needs.get-versions.outputs.crs-version }}
          push: ${{ github.event_name != 'pull_request' }}
          # push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Update repo description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ github.repository }}
