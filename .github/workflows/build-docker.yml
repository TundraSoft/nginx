name: Docker Build

on:
  repository_dispatch:
    types: [build]
  push:
    paths-ignore:
      - .dockerignore
      - .gitignore
      - .github/ISSUE_TEMPLATE/*
      - .github/PULL_REQUEST_TEMPLATE*
      - ./*.md
      - ./LICENSE
  pull_request:
    branches: [ main ]
  # schedule:
  #   - cron: '0 0 * * 0'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      alpine-branches: ${{ steps.alpine-versions.outputs.alpine-branches }}
      latest-alpine-branch: ${{ steps.alpine-versions.outputs.latest-alpine-branch }}
      nginx-versions: ${{ steps.nginx-versions.outputs.nginx-versions }}
      latest-nginx-version: ${{ steps.nginx-versions.outputs.latest-nginx-version }}
      modsecurity-version: ${{ steps.modsecurity-versions.outputs.modsecurity-version }}
      crs-version: ${{ steps.crs-versions.outputs.crs-version }}
    steps:
      - 
        name: Get Alpine Versions
        id: alpine-versions
        run: |
          LATEST_VERSION=$(curl -s https://cz.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | awk '/branch:/ {print $2; exit}')
          ALPINE_BRANCHES="edge "
          LIMIT=3
          ALL_BRANCHES=$(curl -s https://cz.alpinelinux.org/alpine/ | grep -oP '(?<=v)[^/]+(?=/")' | sort -V | tail -n 6 | tac)
          for BRANCH in $ALL_BRANCHES
          do
            if curl --output /dev/null --silent --head --fail "https://cz.alpinelinux.org/alpine/v${BRANCH}/releases/";
            then
              ALPINE_BRANCHES+="${BRANCH} "
              LIMIT=$((LIMIT-1))
            fi
            if [ $LIMIT -le 0 ]; then
              break
            fi
          done
          ALPINE_BRANCHES=$(echo $ALPINE_BRANCHES | tr ' ' '\n' | jq -Rcn '[inputs] | sort | reverse')
          echo "alpine-branches=${ALPINE_BRANCHES}" >> "$GITHUB_OUTPUT"
          echo "latest-alpine-branch=${LATEST_VERSION}" >> "$GITHUB_OUTPUT"
      
      - 
        name: Get Nginx Versions
        id: nginx-versions
        run: |
          NGINX_VERSIONS=$(curl -s https://nginx.org/download/ | grep -oP '(?<=nginx-)[0-9\.]+(?=.tar.gz")' | sort -V | tail -n 4 | tac | jq -Rcn '[inputs]')
          echo "nginx-versions=${NGINX_VERSIONS}" >> "$GITHUB_OUTPUT"
          echo "latest-nginx-version=$(echo $NGINX_VERSIONS | jq -r .[0])" >> "$GITHUB_OUTPUT"
      
      - 
        name: Get Mod Security version (latest)
        id: modsecurity-versions
        run: |
          mod_security=$(curl -s https://api.github.com/repositories/1320594/releases/latest | jq -r .tag_name | sed -e 's/^v//')
          echo "modsecurity-version=${mod_security}" >> "$GITHUB_OUTPUT"
      
      - 
        name: Get Core Ruleset version
        id: crs-versions
        run: |
          crs_version=$(curl -s https://api.github.com/repos/coreruleset/coreruleset/releases/latest | jq -r .tag_name | sed -e 's/^v//')
          echo "crs-version=${crs_version}" >> "$GITHUB_OUTPUT"
  
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 2
      fail-fast: false
      matrix:
        alpine-branch: ${{ fromJson(needs.setup.outputs.alpine-branches) }}
        nginx-version: ${{ fromJson(needs.setup.outputs.nginx-versions) }}
    
    env:
      TEST_TAG: nginx
    
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - 
        name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: |
            name=${{ github.repository }},enable=true
            name=ghcr.io/${{ github.repository }},enable=true
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at }}
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.branch=${{ github.ref_name }}
            org.opencontainers.image.version=${{ matrix.nginx-version }}
            org.opencontainers.image.vendor=Tundrasoft
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=${{ github.repositoryUrl }}/blob/main/README.md
            org.opencontainers.image.description=NGINX with modsecurity on alpine
            org.opencontainers.image.title=NGINX with modsecurity and core ruleset on alpine
          tags: |
            type=raw,prefix=,value=latest,enable=${{ matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && matrix.nginx-version == needs.setup.outputs.latest-nginx-version && github.ref_name == github.event.repository.default_branch }}
            # Version
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name == github.event.repository.default_branch }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name == github.event.repository.default_branch }}
            type=semver,pattern={{major}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name == github.event.repository.default_branch }}
            # Version with alpine prefix
            type=semver,prefix=${{ format('alpine-{0}-', matrix.alpine-branch) }},pattern={{major}}.{{minor}}.{{patch}},value=${{ matrix.nginx-version }},enable=${{ github.ref_name == github.event.repository.default_branch }}
            
            # Version with branch
            type=semver,prefix=${{ format('{0}-', github.ref_name)}},pattern={{major}}.{{minor}}.{{patch}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch != 'edge' && matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name != github.event.repository.default_branch }}
            type=semver,prefix=${{ format('{0}-', github.ref_name)}},pattern={{major}}.{{minor}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch != 'edge' && matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name != github.event.repository.default_branch }}
            type=semver,prefix=${{ format('{0}-', github.ref_name)}},pattern={{major}}.{{minor}},value=${{ matrix.nginx-version }},enable=${{ matrix.alpine-branch != 'edge' && matrix.alpine-branch == needs.setup.outputs.latest-alpine-branch && github.ref_name != github.event.repository.default_branch }}
            # Version with branch and alpine prefix
            type=semver,prefix=${{ format('{0}-alpine-{1}-', github.ref_name, matrix.alpine-branch) }},pattern={{major}}.{{minor}}.{{patch}},value=${{ matrix.nginx-version }},enable=${{ github.ref_name != github.event.repository.default_branch }}
      
      - 
        name: Build Test Image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ env.TEST_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine-branch }}
            NGINX_VERSION=${{ matrix.nginx-version }}
            MOD_SECURITY_VERSION=${{ needs.setup.outputs.modsecurity-version }}
            CRS_VERSION=${{ needs.setup.outputs.crs-version }}
      
      -
        name: Test Image
        run: |
          output=$(docker run --rm ${{ env.TEST_TAG}} /bin/sh -c "nginx -v 2>&1 | grep -q ${{ matrix.nginx-version }} && echo 'OK' || echo 'KO'")
          if [ "$output" == "OK" ]; then
            echo "Test Passed"
          else
            echo "Test Failed"
            exit 1
          fi
      
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_HUB_TOKEN }}
      
      - 
        name: Build and Push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          #,linux/arm/v7
          platforms: linux/amd64,linux/arm64
          provenance: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine-branch }}
            DENO_VERSION=${{ matrix.nginx-version }}
            MOD_SECURITY_VERSION=${{ needs.setup.outputs.modsecurity-version }}
            CRS_VERSION=${{ needs.setup.outputs.crs-version }}
    
  chore:
    needs: build
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v4
        
      -
        name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ github.repository }}