#!/bin/sh
LOCKFILE=/var/log/nginx/nginx-ctl.lock

# Load Defaults from config
source /app/config.sh

OPT_FORCE=0
OPT_DEBUG=1
OPT_PRIMARY_DOMAIN=
OPT_DOMAINS=

print_message() {
  local message_type=$1
  local message=$2
  local color_code
  local dt=$(date --utc +%FT%TZ)
  local host=$(hostname)
  case $message_type in
  ERROR) color_code='\033[0;31m' ;;
  WARN) color_code='\033[0;33m' ;;
  DEBUG) color_code='\033[1;32m' ;;
  INFO) color_code='\033[0;36m' ;;
  esac

  printf "[${dt}@${host}]${color_code}[${message_type}]: ${message}\033[0m\n"
}

ERROR() {
  print_message "ERROR" "$1"
  cleanup
  exit 1
}

WARN() {
  print_message "WARN" "$1"
}

DEBUG() {
  [ "$DEBUG_MODE" = 1 ] && print_message "DEBUG" "$1"
}

INFO() {
  print_message "INFO" "$1"
}

# Config management
# This script contains a base config file (JSON) where 
# script defaults are mentioned. This can be dynamically edited 
# from nginx-cc project (comming soon). Idea is to have a centralised management 
# infrastructure to manage configurations. However we do not want to loose 
# indipendant functionality of the nginx server

# Load from config
config_load() {
  echo "Not Implemented"
}

# Save to config file
config_save() {
  echo "Not Implemented"
}

init() {
  if [ -f ${LOCKFILE} ]; then
    INFO "There is already an instance of this script running. Exiting..."
    exit 1
  fi
  touch ${LOCKFILE}
}

cleanup() {
  if [ -f ${LOCKFILE} ]; then
    rm -f ${LOCKFILE}
  fi
}

usage() {
  echo "Usage: ${0} COMMAND [OPTIONS]"
  echo
  echo "Script to manage NGINX configuration"
  echo
  echo "Commands:"
  echo
  echo "###############################################################################"
  echo "#                                 NGINX                                       #"
  echo "###############################################################################"
  echo
  echo "  configure                       Configure base nginx server"
  echo
  echo "  dhparams                        Generate dhparams.pem file if not present"
  echo 
  echo "  add-site                        Add new site"
  echo "    Options:"
  echo "      -d, --domain <TLD>          The domain for which to create the site. If multiple domains are specified, then the first domain will be used as the primary domain"
  echo "          --ssl-mode <SSL_MODE>   SSL Mode to be used, auto, none, acme, self"
  echo "          --with-modsecurity      Enable modsecurity with default rules on this site"
  echo
  echo "  list-sites                      List all sites"
  echo
  echo "  enable-site                     Renew certificate. If domain is not specified, then all certificates will be renewed"
  echo "    Options:"
  echo "      -d, --domain <TLD>          The domain to be enabled. The primary domain should be passed. Passing alternate domain will throw error"
  echo "                                  If no domain is specified then all sites will be enabled"
  echo
  echo "  disable-site                    Renew certificate. If domain is not specified, then all certificates will be renewed"
  echo "    Options:"
  echo "      -d, --domain <TLD>          The domain to be disabled. The primary domain should be passed. Passing alternate domain will throw error"
  echo "                                  If no domain is specified then all sites will be enabled"
  echo
  echo "  reload                          Reload nginx configuration"
  echo
  # echo "###############################################################################"
  # echo "#                                 Upstream                                     "
  # echo "###############################################################################"
  # echo 
  # echo "  add-upstream"
  # echo "     Options:"
  # echo "          --upstream-ip           List of IP address to use as upstream"
  # echo "          --upstream-hostname     The hostname for upstream (uses jdomain)"
  # echo "          --upstream-hostname-ip  Max number of IP's to fetch for hostname"
  # echo "          --upstream-hostname-v6  Use IPv6"
  # echo "          --upstream-hostname-int Hostname resolve interval in seconds. Default 1"
  # echo "          --upstream-port         The docker port this domain uses as upstream"
  # echo "          --upstream-weight       The docker weight this domain uses as upstream"
  # echo "          --upstream-fail-timeout The docker fail timeout this domain uses as upstream"
  # echo "          --upstream-max-fails    The docker max fails this domain uses as upstream"
  echo "###############################################################################"
  echo "#                                    SSL                                      #"
  echo "###############################################################################"
  echo
  echo "  acme-register"
  echo "    Options:"
  echo "      -e, --email <EMAIL>         The email address to be used for registration"
  echo "      -s, --server <SERVER>       The server with which to register, default is letsencrypt"
  echo
  echo "  ssl-generate                    Generate SSL certificate"
  echo "    Options:"
  echo "      -d, --domain <TLD>          The domain for which to create the SSL. If multiple domains are specified, then the first domain will be used as the primary domain"
  echo "          --ssl-mode <SSL_MODE>   SSL Mode to be used, auto, none, acme, self. Defaults to auto"
  echo "          --server <SERVER>       The server with which to register, default is letsencrypt"
  echo
  echo "  ssl-renew                       Renew certificate. If domain is not specified, then all certificates will be renewed"
  echo "    Options:"
  echo "      -d, --domain <TLD>          The domain to renew. Do not pass this argument to renew all."
  echo 
  echo "###############################################################################"
  echo "#                                  MaxMind                                    #"
  echo "###############################################################################"
  echo
  echo "  maxmind-download                Download MaxMind database"
  echo "    Options:"
  echo "          --key <KEY>             The MaxMind license key"
  echo "          --edition <EDITION>     The MaxMind edition to download, defaults to geoip2lite"
  echo "          --database <DATABASE>   The MaxMind database to download, defaults to city"
  echo
  echo "Options:"
  echo "  -h, --help                      Show this help message and exit"
  echo "  -c, --config <FILE>             The configuration file to use"
  echo "      --debug                     Enable debug messages to be displayed"
  echo
}

# NGINX management
command_configure() {
  WARN "Running nginx configuration! All settings will be reset. Site configuration etc will not be affected."
  WARN "This should mainly be run when starting a container"
  # Pre Configure tasks
  # Maxmind
  if [ "${OPT_MAXMIND_KEY}" != "" ] && [ ! -f ${MAXMIND_PATH}/maxmind.mmdb ]; then
    DEBUG "Configure - Downloading Maxmind database"
    command_maxmind_fetch
  fi
  # ACME
  if [ "${OPT_ACME_EMAIL}" != "" ]; then
    command_acme_register
  fi
  # DHPARAM
  if [ ! -f ${NGINX_CONF_PATH}/dhparam.pem ]; then
    command_dhparams
  fi

  # OK We can now start generating the config files
  rm -rf /tmp/config
  mkdir -p /tmp/config/conf.d
  DEBUG "Generating modules.conf"
  cp -f /templates/modules.conf.template /tmp/config/conf.d/modules.conf
  if [ -f ${NGINX_MODULES_PATH}/ngx_stream_module.so ]; then
    DEBUG "Adding Stream modules first as there could be dependencies"
    INFO "Adding module       : ngx_stream_module"
    echo "load_module ${NGINX_MODULES_PATH}/ngx_stream_module.so;" >> /tmp/config/conf.d/modules.conf
  fi
  for file in ${NGINX_MODULES_PATH}/*.so; do
    if [ "$file" != "${NGINX_MODULES_PATH}/ngx_stream_module.so" ]; then
      filename=$(basename -s .so $file)
      INFO "Adding module       : ${filename}"
      echo "load_module ${file};" >> /tmp/config/conf.d/modules.conf
    fi
  done
  
  DEBUG "Generate Whitelist"
  cp -f /templates/whitelist.conf.template /tmp/config/conf.d/whitelist.conf
  if [ ! -z "${OPT_NGINX_WHITELIST_IP}" ]; then
    DEBUG "Adding whitelist IP address"
    # OPT_NGINX_WHITELIST_IP is a comma seperated list of IP addresses, loop throw and add
    for ip in $(echo ${OPT_NGINX_WHITELIST_IP} | sed "s/,/ /g"); do
      DEBUG "Whitelisting IP/IP Range      : ${ip}"
      echo "allow ${ip};" >> /tmp/config/conf.d/whitelist.conf
    done
  fi

  # Maxmind
  if [ -f "${MAXMIND_PATH}/maxmind.mmdb" ]; then
    INFO "Generating maxmind-${OPT_MAXMIND_DATABASE} config"
    if [ "${OPT_MAXMIND_DATABASE}" == "City" ]; then
      cp /templates/maxmind-city.conf.template /tmp/config/conf.d/maxmind.conf
    else
      cp /templates/maxmind-country.conf.template /tmp/config/conf.d/maxmind.conf
    fi
  fi
  # ACME Stateless
  if [ "${OPT_ACME_THUMBPRINT}" != "" ]; then
    INFO "Generating ACME stateless config"
    export OPT_ACME_THUMBPRINT=$OPT_ACME_THUMBPRINT
    envsubst '$OPT_ACME_THUMBPRINT' < /templates/acme-stateless.conf.template > /tmp/config/conf.d/acme-stateless.conf
  fi

  # Modsecurity
  DEBUG "ModSecurity"

  # NGINX.conf
  export NGINX_CACHE_PATH=$NGINX_CACHE_PATH, OPT_NGINX_MAX_BODY_SIZE=$OPT_NGINX_MAX_BODY_SIZE
  envsubst '$NGINX_CACHE_PATH,$OPT_NGINX_MAX_BODY_SIZE' < /templates/nginx.conf.template > /tmp/config/nginx.conf
  # Substitude 
  DEBUG "Replacing/Enabling basis config"
  if [ -f /tmp/config/conf.d/maxmind.conf ]; then
    # Enable maxmind
    sed -i 's|#include /etc/nginx/conf.d/maxmind.conf;|include /etc/nginx/conf.d/maxmind.conf;|' /tmp/config/nginx.conf
  fi
  if [ -f /tmp/config/conf.d/acme-stateless.conf ]; then
    # Enable in nginx.conf
    sed -i 's|#include /etc/nginx/conf.d/acme-stateless.conf;|include /etc/nginx/conf.d/acme-stateless.conf;|' /tmp/config/nginx.conf
  fi
  INFO "Generated Configs"
  INFO "nginx.conf                : Main NGINX Configuration"
  INFO "modules.conf              : Modules to be imported"
  INFO "whitelist.conf            : Whitelisted IPs for sensitive path access"
  if [ -f /tmp/config/maxmind.conf ]; then
    INFO "maxmind.conf              : Maxmind GeoIP config (${OPT_MAXMIND_EDITION}-${OPT_MAXMIND_DATABASE})"
  fi
  if [ -f /tmp/config/acme-stateless.conf ]; then
    INFO "acme-stateless.conf       : ACME Stateless support"
  fi
  DEBUG "Moving configuration files"
  cp -f /tmp/config/nginx.conf ${NGINX_CONF_PATH}/nginx.conf
  cp -f /tmp/config/conf.d/*.conf ${NGINX_CONF_PATH}/conf.d/
  if [ $(nginx -t) -eq 1 ]; then
    # Config is valid, lets reload
   ERROR "NGINX config is not valid."
  fi
}

command_reload() {
  local CONFIG_HASH=$(nginx -T | sha512sum | sed "s/ *\-$//")
  local HASH_FILE=/tmp/nginx.hash
  local CURRENT_HASH=
  if [ -f "${HASH_FILE}" ]; then
    # Load the value
    CURRENT_HASH=$(cat ${HASH_FILE})
  fi
  DEBUG "Config Hash    : ${CONFIG_HASH}"
  DEBUG "Current Hash   : ${CURRENT_HASH}"
  DEBUG "Force Flag     : ${OPT_FORCE}"
  if [ "$CURRENT_HASH" != $CONFIG_HASH ] || [ "$OPT_FORCE" == 1 ]; then
    # Ok Validate the new config
    if [ $(nginx -t) -eq 0 ]; then
      # Config is valid, lets reload
      if ! nginx -s reload; then
        ERROR "Failed to reload NGINX config"
      fi
      # Remove old file
      rm -f ${HASH_FILE}
      echo $CONFIG_HASH > ${HASH_FILE}
    else
      # Config is not valid, lets ignore
      ERROR "NGINX config is not valid. Ignoring changes..."
    fi
  fi
}

command_dhparams() {
  if [ ! -f ${NGINX_CONF_PATH}/dhparam.pem ]; then
    INFO "Generating dhparams.pem with key length: ${OPT_SSL_KEY_LENGTH}"
    openssl dhparam -dsaparam -out ${NGINX_CONF_PATH}/dhparam.pem ${OPT_SSL_KEY_LENGTH};
  fi
}
# SSL Management
callAcme() {
  /app/acme/acme.sh --home ${ACME_HOME} --config-home ${ACME_HOME} "$@"
  return $?
}

command_acme_register(){
  DEBUG "In ACME Register"
  if [ ! -z ${OPT_ACME_EMAIL} ];
  then
    INFO "Registering with ACME..."
    INFO "SERVER      : ${OPT_ACME_SERVER}"
    INFO "EMAIL       : ${OPT_ACME_EMAIL}"
    output=$(callAcme --register-account --server ${OPT_ACME_SERVER} -m ${OPT_ACME_EMAIL})
    # Extract the value of ACCOUNT_THUMBPRINT from the output using grep and awk
    OPT_ACME_THUMBPRINT=$(echo "$output" | grep "ACCOUNT_THUMBPRINT" | awk -F "'" '{print $2}')
    if [ "$OPT_ACME_THUMBPRINT}" = "" ]; then    
      DEBUG "ACME Register - Error fetching thumbprint"
      DEBUG "AXME Register - Output: ${output}"
      ERROR "Registration failed for email ${OPT_ACME_EMAIL} in ${OPT_ACME_SERVER}!"
    fi
    DEBUG "Registered ACME Account with email ${OPT_ACME_EMAIL} and server ${OPT_ACME_SERVER}. Received thumbprint - ${OPT_ACME_THUMBPRINT}"
    INFO "Registration complete"
  else
    ERROR "Email id is required for registration"
  fi
}

command_ssl_generate() {
  echo "Not Implemented"
}

command_ssl_renew() {
  echo "Not implemented"
}

# Maxmind GeoIP database management
command_maxmind_fetch() {
  if [ -z "${OPT_MAXMIND_KEY}" ]; then
    ERROR "Missing Maxmind licence key"
  fi
  DOWNLOAD_FILE="${OPT_MAXMIND_EDITION}-${OPT_MAXMIND_DATABASE}"
  DOWNLOAD_URL="https://download.maxmind.com/app/geoip_download?edition_id=${DOWNLOAD_FILE}&license_key=${OPT_MAXMIND_KEY}&suffix=tar.gz"

  INFO "MaxMind - Ready to download"
  INFO "EDITION       : ${OPT_MAXMIND_EDITION}"
  INFO "DATABASE      : ${OPT_MAXMIND_DATABASE}"
  INFO "BACKUP        : ${OPT_BACKUP}"
  INFO "DOWNLOAD URL  : ${DOWNLOAD_URL}"
  
  DEBUG "Maxmind - Downloading ${DOWNLOAD_FILE} from ${DOWNLOAD_URL}"
  mkdir -p /tmp/maxmind
  if ! wget ${DOWNLOAD_URL} -O /tmp/${DOWNLOAD_FILE}.tar.gz; then
    ERROR "Maxmind - Failed to download ${DOWNLOAD_FILE} from ${DOWNLOAD_URL}"
  fi
  DEBUG "Maxmind - Downloaded ${DOWNLOAD_FILE} from maxmind servers"
  if ! tar -xf /tmp/${DOWNLOAD_FILE}.tar.gz -C /tmp/maxmind --strip-components 1; then
    ERROR "Maxmind - Failed to extract ${DOWNLOAD_FILE}.tar.gz"
  fi
  DEBUG "Maxmind - Extracted the archive"
  mv /tmp/maxmind/${DOWNLOAD_FILE}.mmdb /tmp/maxmind/maxmind.mmdb
  # Take backup of existing file
  if [ -f "${MAXMIND_PATH}/maxmind.mmdb" ] && [ ${OPT_BACKUP} == 1 ]; then
    DEBUG "Maxmind - Backing up existing db file"
    mv "${MAXMIND_PATH}/maxmind.mmdb" "${MAXMIND_PATH}/maxmind-$(date +%Y-%m-%d).mmdb"
  fi
  DEBUG "Maxmind - Moving the file to ${MAXMIND_PATH}/maxmind.mmdb"
  mv -f /tmp/maxmind/maxmind.mmdb "${MAXMIND_PATH}/maxmind.mmdb"
  rm /tmp/${DOWNLOAD_FILE}.tar.gz
  rm -rf /tmp/maxmind
}

###############################################################################
#                                 Main Section                                #
###############################################################################
if [ $# -eq 0 ]; then
  usage
  exit 1;
fi

COMMAND="${1:-}"
COMMAND="${COMMAND//-/_}"
if [ -z "$COMMAND" ]; then
  ERROR "No command was specified. Run with --help to see the usage. Maybe you want to run \`$ARG0 issue\`?"
fi

if ! command -v "command_${COMMAND}" > /dev/null 2>&1; then
  ERROR "Unknown command: ${COMMAND}. Run with --help to see the usage."
fi
shift

if ! args="$(getopt -o hs:e:d:o: --long help,server:,email:,domain:,key:,edition:,database:,output:,alt-domains:,debug -n "$ARG0" -- "$@")"; then
  usage
  exit 1
fi

set -- $args
while [ "$#" -gt 0 ]; do
  arg="$1"
  shift
  case "$arg" in
    -h | --help)
      usage
      exit 0
      ;;
    -s | --server)
      OPT_ACME_SERVER=$1
      shift
      ;;
    -e | --email)
      OPT_ACME_EMAIL=${1//\'/}
      shift
      ;;
    -d | --domain)
      if [ -z "${OPT_PRIMARY_DOMAIN}" ]; then
        OPT_PRIMARY_DOMAIN=${1//\'/}
      fi
      OPT_DOMAINS="${OPT_DOMAINS} ${1//\'/}"
      shift
      ;;
    --key)
      OPT_MAXMIND_KEY=${1//\'/}
      shift
      ;;
    --edition)
      OPT_MAXMIND_EDITION=$1
      shift
      ;;
    --database)
      OPT_MAXMIND_DATABASE=$1
      shift
      ;;
    -o | --output)
      OPT_OUTPUT=${1//\'/}
      shift
      ;;
    --debug)
      DEBUG_MODE=1
      ;;
    --)
      break
      ;;
    *)
      ERROR "Unknown argument '$arg' when parsing script arguments."
      exit 1
      ;;
  esac
done

if [ "${OPT_ACME_SERVER}" != "letsencrypt" ] && [ "${OPT_ACME_SERVER}" != "zerossl" ]; then
  ERROR "Invalid server ${OPT_ACME_SERVER} specified. Valid values are letsencrypt and zerossl"
fi

EDITION=${OPT_MAXMIND_EDITION}
DATABASE=${OPT_MAXMIND_DATABASE}
# Validate the data
EDITION=$(echo "${EDITION}" | tr '[:upper:]' '[:lower:]')
DATABASE=$(echo "${DATABASE}" | tr '[:upper:]' '[:lower:]')
if [ "${EDITION}" != 'geolite2' ] && [ "${EDITION}" != 'geoip2' ]; then
  ERROR "Maxmind - Unknown Maxmind Edition ${EDITION}. Only GeoLite2 or GeoIP2 supported"
fi
# DATABASE must be either city or country
if [ "${DATABASE}" != 'city' ] && [ "${DATABASE}" != 'country' ]; then
  ERROR "Maxmind - Unknown Database provided. Only City or Country Supported."
fi
# Ok we can replace the variable again as the file names are sensitive
if [ "${EDITION}" == "geolite2" ]; then
  OPT_MAXMIND_EDITION="GeoLite2"
else
  OPT_MAXMIND_EDITION="GeoIP2"
fi
if [ "${DATABASE}" == "country" ]; then
  OPT_MAXMIND_DATABASE="Country"
else
  OPT_MAXMIND_DATABASE="City"
fi

if [ ${COMMAND} == 'issue' ] || [ ${COMMAND} == 'renew' ]; then
  if [ -z "${OPT_OUTPUT}" ]; then
    ERROR "Output directory is required for issue and renew commands"
  fi
  if [ ! -d ${OPT_OUTPUT} ]; then
    mkdir -p ${OPT_OUTPUT}
  fi
fi

init
"command_${COMMAND}" || cleanup
cleanup
