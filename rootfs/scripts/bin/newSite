#!/bin/sh
NGINX_CONF_PATH=${NGINX_CONF_PATH:-'/etc/nginx/sites.d/'}
NGINX_CERT_PATH=${NGINX_CERT_PATH:-'/etc/nginx/certs/'}
NGINX_WEBROOT=${NGINX_WEBROOT:-'/app'}
SITE_TEMPLATE="/templates/site.conf.template"

# Function to display help message
display_help() {
  echo "Usage: $0 --domain=<domain> --sslmode=<mode> [--dryrun]"
  echo
  echo "  --domain    : Top Level Domain, e.g. abc.com"
  echo "  --sslmode   : SSL Mode, must be one of 'ACME', 'SELF', 'MANUAL'"
  echo "  --dryrun    : Optional flag, if passed then set to true else false"
  exit 1
}

# If no arguments are provided, display help
if [ $# -eq 0 ]; then
  display_help
fi

# Initialize variables
domain=""
sslmode=""
dryrun="false"
alt_domains=""

# Parse command-line arguments
for arg in "$@"
do
  case $arg in
    --domain=*)
    domain="${arg#*=}"
    ;;
    --sslmode=*)
    sslmode="${arg#*=}"
    ;;
    --alt-domains=*)
    alt_domains="${arg#*=}"
    shift
    ;;
    --dryrun)
    dryrun="true"
    ;;
    *)
    echo "Unknown argument: $arg"
    display_help
    ;;
  esac
done

# Check if mandatory arguments were provided
if [ -z "$domain" ] || [ -z "$sslmode" ]; then
  echo "Both --domain and --sslmode arguments are mandatory."
  display_help
fi

# Validate sslmode
if [ "$sslmode" != "ACME" ] && [ "$sslmode" != "SELF" ] && [ "$sslmode" != "MANUAL" ]; then
  echo "sslmode must be one of 'ACME', 'SELF', or 'MANUAL'."
  display_help
fi

# Print the values
echo "Domain: $domain"
echo "SSL Mode: $sslmode"
echo "Dry Run: $dryrun"

directory_present=false
config_present=false
if [ -d "$NGINX_WEBROOT/$domain" ]; then
  directory_present=true
fi
if [ -f "$NGINX_CONF_PATH/$domain.conf" ]; then
  config_present=true
fi

# Create a directory in NGINX_WEBROOT with the domain name
domain_path="$NGINX_WEBROOT/$domain"
if [ ! -d "$domain_path" ]; then
  mkdir -p "$domain_path"
else
  if [ "$dryrun" = "true" ] && [ "$directory_present" = "true" ] && [ "$config_present" = "true" ]; then
    echo "Config already present for domain: $domain. Exiting."
    exit 0
  fi
fi


# If sslmode is SELF, generate a self-signed certificate
if [ "$sslmode" = "SELF" ]; then
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout "$NGINX_CERT_PATH/$domain.key" \
          -out "$NGINX_CERT_PATH/$domain.crt" \
          -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=$domain"
elif [ "$sslmode" = "ACME" ]; then
  # Call the acme script
  ./acme
fi


SERVERNAMES="$domain"
if [ ! -z "$alt_domains" ]; then
  # Replace commas with spaces
  alt_domains=$(echo "$alt_domains" | tr ',' ' ')
  SERVERNAMES="$SERVERNAMES $alt_domains"
fi


# Use envsubst on SITE_TEMPLATE and set output to NGINX_CONF_PATH
envsubst '$SERVERNAMES' < "$SITE_TEMPLATE" > "$NGINX_CONF_PATH/$domain.conf"

# Test the NGINX configuration
nginx -t

if [ $? -eq 0 ]; then
  echo "NGINX configuration test is successful."
else
  echo "Error in NGINX configuration. Disabling the site configuration."
  if [ "$dryrun" = "false" ]
  then
    mv "$config_file_path" "$NGINX_CONF_PATH/$domain.conf.disabled"
  fi
fi

# If dryrun is true, revert changes unless config was already present
if [ "$dryrun" = "true" ] && [ "$config_present" = "false" ]; then
  echo "Dry run mode: Reverting changes."
  rm -f "$config_file_path" "$NGINX_CONF_PATH/$domain.conf"
  if [ "$sslmode" = "SELF" ]; then
    rm -f "$NGINX_CERT_PATH/$domain.key" "$NGINX_CERT_PATH/$domain.crt"
  fi
fi

# Remove the directory if it was not present before and dryrun is true
if [ "$dryrun" = "true" ] && [ "$directory_present" = "false" ]; then
  rm -rf "$domain_path"
fi