#!/bin/sh

# Define the lock file
LOCKFILE="/var/log/nginx/$(basename $0).lock"
CONFIG_FILE="config.json"

# Ensure only one instance of the script runs at a time
if [ -e "${LOCKFILE}" ] && kill -0 `cat "${LOCKFILE}"`; then
  echo "An instance of this script is already running."
  exit 1
fi

# Create lock file
trap "rm -f ${LOCKFILE}; exit" INT TERM EXIT
echo $$ > "${LOCKFILE}"

# Global variables
DEBUG=0


# Message handling
LOG() {
  local level="$1"
  shift
  case "$level" in
    DEBUG) [ "$DEBUG" -eq 1 ] && echo "[DEBUG] $*";;
    INFO) echo "[INFO] $*";;
    WARN) echo "[WARN] $*" 1>&2;;
    ERROR) echo "[ERROR] $*" 1>&2;;
    *) echo "$*";;
  esac
}

# Load configuration
load_config() {
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "Configuration file $CONFIG_FILE does not exist!"
    exit 1
  fi
  DEBUG=$(jq -r '.debug' "$CONFIG_FILE")
  VERBOSE=$(jq -r '.verbose' "$CONFIG_FILE")
  PATH_TO_SOMETHING=$(jq -r '.path' "$CONFIG_FILE")
  MAX_AGE=$(jq -r '.max_age' "$CONFIG_FILE")
}

# Save configuration
save_config() {
  jq ".debug = $DEBUG | .verbose = $VERBOSE | .path = \"$PATH_TO_SOMETHING\" | .max_age = $MAX_AGE" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"
}

# Usage function
usage() {
  echo "Usage: $0 <command> [options]"
  echo ""
  echo "Commands:"
  echo "  sample         Run the sample command."
  echo ""
  echo "Options:"
  echo "  -d             Turn on debug mode."
  echo "  -v             Turn on verbose mode (info level logging)."
  echo "  -h             Display this help message."
}

# Actually rotate the logs
# rotate() {
#   local FILE=$1
#   local YDAY=$(date -d "-1 days" +"%Y-%m-%d")
#   if [ -s "$FILE" ]; then
#     DEBUG "Rotating $FILE"
#     # Delete file if exists cuz we dont want errors!
#     rm -f "${FILE}-${YDAY}.log"
#     mv "$FILE" "${FILE}-${YDAY}.log"
#     touch "$FILE"
#   fi
# }

# Rotate logs in a directory main function
command_rotate() {
  local PATH=$1
  local YDAY=$(date -d "-1 days" +"%Y-%m-%d")
  DEBUG "Rotating logs in $PATH"
  find "$PATH" -type f -name "*.log" | while read -r file; do
    if [ -s "$FILE" ]; then
      DEBUG "Rotating $FILE"
      # Delete file if exists cuz we dont want errors!
      rm -f "${FILE}-${YDAY}.log"
      mv "$FILE" "${FILE}-${YDAY}.log"
      touch "$FILE"
    fi
  done
#   for item in "$dir"/*; do
#     if [ -d "$item" ]; then
#       command_rotate "$item"
#     elif [[ -f "$item" && "${item: -4}" == ".log" ]]; then
#       rotate "$item"
#     fi
#   done

}

# Purge logs in a directory main function
command_purge() {
  local dir=$1
  local days_old=$2
  local target_date=$(date -d "-$days_old days" +"%Y-%m-%d")
  find "$dir" -type f -name "*.log" | while read -r file; do
    # Extract date from filename
    local file_date=$(basename "$file" .log | awk -F'-' '{print $NF}')
    # Compare dates
    if [[ "$file_date" < "$target_date" ]]; then
      echo "Deleting $file"
      rm -f "$file"
    fi
  done
}

# Parse options
COMMAND=$1
if [ -z "$COMMAND" ]; then
  usage
  exit 1
fi
shift  # shift off the command for getopts

if ! args="$(getopt -o h: --long help,domain:,server:,email:,debug -n "$ARG0" -- "$@")"; then
  usage
  exit 1
fi

set -- $args
while [ "$#" -gt 0 ]; do
  arg="$1"
  shift
  case "$arg" in
    -h | --help)
      usage
      exit 0
      ;;
    --debug)
      DEBUG=1
      ;;
    --days)
      OPT_DAYS="${1//\'/}"
      # check if OPT_DAYS is a number greater than 0
      if ! [[ "$OPT_DAYS" =~ ^[0-9]+$ ]] || [ "$OPT_DAYS" -lt 1 ]; then
        LOG ERROR "Invalid value for --days: $OPT_DAYS"
        exit 1
      fi
      shift
      ;;
    --)
      break
      ;;
    *)
      ERROR "Unknown argument '$arg' when parsing script arguments."
      exit 1
      ;;
  esac
done
# while getopts "dvh" opt; do
#   case "$opt" in
#     d) DEBUG=1;;
#     v) VERBOSE=1;;
#     h) usage; exit 0;;
#     *) usage; exit 1;;
#   esac
# done

# Main script execution
LOG DEBUG "Script started."

# Execute command
case "$COMMAND" in
  rotate) command_rotate;;
  purge) command_purge;;
  *) LOG ERROR "Invalid command: $COMMAND"; usage; exit 1;;
esac

LOG DEBUG "Script finished."

# Remove lock file
rm -f "${LOCKFILE}"
trap - INT TERM EXIT
