#!/bin/sh
LOCKFILE=/var/logs/nginx/maxmind.lock
OPT_KEY=${MAXMIND_KEY}
OPT_EDITION=${MAXMIND_EDITION:-geoip2lite}
OPT_DATABASE=${MAXMIND_DATABASE:-city}
OPT_OUTPUT=/etc/nginx/maxmind
OPT_BACKUP=0

# Function to display error message
print_message() {
  local message_type=$1
  local message=$2
  local color_code
  local dt=$(date --utc +%FT%TZ)
  local host=$(hostname)
  case $message_type in
    ERROR) color_code='\033[0;31m' ;;
    WARN) color_code='\033[0;33m' ;;
    DEBUG) color_code='\033[1;32m' ;;
    INFO) color_code='\033[0;36m' ;;
  esac

  printf "[${dt}@${host}]${color_code}[${message_type}]: ${message}\033[0m\n"
}

ERROR() {
  print_message "ERROR" "$1"
  cleanup
  exit 1
}

WARN() {
  print_message "WARN" "$1"
}

DEBUG() {
  [ "$DEBUG_MODE" = 1 ] && print_message "DEBUG" "$1"
}

INFO() {
  print_message "INFO" "$1"
}

init() {
  if [ -f ${LOCKFILE} ]; then
    ERROR "Script is already running"
  fi
  touch ${LOCKFILE}
}

cleanup() {
  if [ -f ${LOCKFILE} ]; then
    rm -f ${LOCKFILE}
  fi
}

usage() {
  echo "Usage: ${0} COMMAND [OPTIONS]"
  echo
  echo "Helper script manage Maxmind Geop IP Database"
  echo "By default the script will try and fetch information from environment variables"
  echo "Environment Variables: "
  echo "  MAXMIND_KEY=<LicenceKey>"
  echo "  MAXMIND_EDITION=<GeoIP2Lite | GeoIP2>"
  echo "  MAXMIND_DATABASE=<city | country>"
  echo "  MAXMIND_OUTPUT=/etc/nginx/maxmind"
  echo
  echo
  echo "Options:"
  echo "  -h, --help                      Show this help message and exit"
  echo "  -e, --edition                   The Maxmind edition to download, default is GeoIP2Lite"
  echo "  -k, --key                       The Maxmind licence key"
  echo "  -d, --database                  The Maxmind database to download, default is city"
  echo "  -o, --output                    The output directory to store the database, default is /etc/nginx/maxmind"
  echo "      --backup                    Backup existing database"
  echo "      --debug                     Enable debug messages to be displayed"
  echo
}

command_download() {
  local EDITION='GeoIP2Lite'
  local DATABASE='City'
  if [ "${OPT_EDITION}" == 'geoip2' ]; then
    EDITION='GeoIP2'
  fi
  if [ "${OPT_DATABASE}" == 'country' ]; then
    DATABASE='Country'
  fi
  if [ -z "${OPT_KEY}" ]; then
    ERROR "Missing Maxmind licence key"
  fi
  INFO "Downloading ${EDITION}-${DATABASE} database"
  DOWNLOAD_FILE="${EDITION}-${DATABASE}"
  DOWNLOAD_URL="https://download.maxmind.com/app/geoip_download?edition_id=${DOWNLOAD_FILE}&license_key=${OPT_KEY}&suffix=tar.gz"
  DEBUG "Downloading ${DOWNLOAD_FILE} from ${DOWNLOAD_URL}"
  mkdir -p /tmp/maxmind
  if ! wget ${DOWNLOAD_URL} -O /tmp/${DOWNLOAD_FILE}.tar.gz; then
    ERROR "Failed to download ${DOWNLOAD_FILE} from ${DOWNLOAD_URL}"
  fi
  if ! tar -xf /tmp/${DOWNLOAD_FILE}.tar.gz -C /tmp/maxmind --strip-components 1; then
    ERROR "Failed to extract ${DOWNLOAD_FILE}.tar.gz"
  fi
  rm /tmp/${DOWNLOAD_FILE}.tar.gz
  # Rename
  mv /tmp/maxmind/${DOWNLOAD_FILE}.mmdb /tmp/maxmind/maxmind-${OPT_DATABASE}.mmdb
  # Take backup of existing file
  if [ -f "${OPT_OUTPUT}/maxmind-${OPT_DATABASE}.mmdb" ] && [ ${OPT_BACKUP} == 1 ]; then
    mv "${OPT_OUTPUT}/maxmind-${OPT_DATABASE}.mmdb" "${OPT_OUTPUT}/maxmind-${OPT_DATABASE}-$(date +%Y-%m-%d).mmdb"
  fi
  mv -f /tmp/maxmind/maxmind-${OPT_DATABASE}.mmdb "${OPT_OUTPUT}/maxmind-${OPT_DATABASE}.mmdb"
}

# parse CLI args
if ! args="$(getopt -o he:k:d:o: --long help,edition:,key:,database:,output:,backup,debug -n "$ARG0" -- "$@")"; then
  usage
  exit 1
fi

# eval set -- "$args"
set -- $args
while [ "$#" -gt 0 ]; do
  arg="$1"
  shift
  case "$arg" in
    -h | --help)
      usage
      exit 0
      ;;
    -k | --key)
      OPT_KEY=${1//\'/}
      shift
      ;;
    -e | --edition)
      OPT_EDITION=$(echo ${1//\'/} | awk '{print tolower($0)}')
      if [ "${OPT_EDITION}" != "geoip2lite" ] && [ "${OPT_EDITION}" != "geoip2" ]; then
        ERROR "Invalid edition ${OPT_EDITION}"
      fi
      shift
      ;;
    -d | --database)
      OPT_DATABASE=$(echo ${1//\'/} | awk '{print tolower($0)}')
      if [ "${OPT_DATABASE}" != "city" ] && [ "${OPT_DATABASE}" != "country" ]; then
        ERROR "Invalid database ${OPT_DATABASE}"
      fi
      shift
      ;;
    -o | --output)
      OPT_OUTPUT=${1//\'/}
      shift
      ;;
    --backup)
      OPT_BACKUP=1
      ;;
    --debug)
      DEBUG_MODE=1
      ;;
    --)
      break
      ;;
    *)
      # XXX this means we missed something in our "getopt" arguments above!
      ERROR "Unknown argument '$arg' when parsing script arguments."
      exit 1
      ;;
  esac
done

if [ -z "${OPT_KEY}" ]; then
  INFO "Maxmind key is not set. Nothing to do"
  exit 0
fi

if [ -z ${OPT_OUTPUT} ]; then
  ERROR "Output directory is not defined"
fi
if [ ! -d ${OPT_OUTPUT} ]; then
  mkdir -p ${OPT_OUTPUT}
fi

# init
init
command_download
cleanup
